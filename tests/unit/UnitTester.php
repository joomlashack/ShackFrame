<?php //[STAMP] 8514285905f46e708a6cd92738757932

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile


use Codeception\Module\Asserts;
use Codeception\Module\UnitHelper;
use Codeception\Module\JoomlaDboHelper;
use Codeception\Module\ClassHelper;
use Codeception\Module\ExtensionsGenericHelper;
use Codeception\Module\ExtensionsLicensedHelper;
use Codeception\Module\AssertHelper;

/**
 * Inherited Methods
 * @method void wantToTest($text)
 * @method void wantTo($text)
 * @method void execute($callable)
 * @method void expectTo($prediction)
 * @method void expect($prediction)
 * @method void amGoingTo($argumentation)
 * @method void am($role)
 * @method void lookForwardTo($achieveValue)
 * @method void comment($description)
 * @method void haveFriend($name, $actorClass = null)
 *
 * @SuppressWarnings(PHPMD)
*/
class UnitTester extends \Codeception\Actor
{
   
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are equal.
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     *
     * @return mixed
     * @see \Codeception\Module\Asserts::assertEquals()
     */
    public function assertEquals($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not equal
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotEquals()
     */
    public function assertNotEquals($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNotEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that expected is greater than actual
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThan()
     */
    public function assertGreaterThan($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertGreaterThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @deprecated
     * @see \Codeception\Module\Asserts::assertGreaterThen()
     */
    public function assertGreaterThen($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertGreaterThen', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that expected is greater or equal than actual
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThanOrEqual()
     */
    public function assertGreaterThanOrEqual($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertGreaterThanOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @deprecated
     * @see \Codeception\Module\Asserts::assertGreaterThenOrEqual()
     */
    public function assertGreaterThenOrEqual($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertGreaterThenOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that expected is less than actual
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertLessThan()
     */
    public function assertLessThan($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertLessThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that expected is less or equal than actual
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertLessThanOrEqual()
     */
    public function assertLessThanOrEqual($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertLessThanOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack contains needle
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertContains()
     */
    public function assertContains($needle, $haystack, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack doesn't contain needle.
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotContains()
     */
    public function assertNotContains($needle, $haystack, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNotContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertEmpty()
     */
    public function assertEmpty($actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotEmpty()
     */
    public function assertNotEmpty($actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNotEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNull()
     */
    public function assertNull($actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotNull()
     */
    public function assertNotNull($actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNotNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is positive.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertTrue()
     */
    public function assertTrue($condition, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertTrue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is negative.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFalse()
     */
    public function assertFalse($condition, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertFalse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fails the test with message.
     *
     * @param $message
     * @see \Codeception\Module\Asserts::fail()
     */
    public function fail($message) {
        return $this->scenario->runStep(new \Codeception\Step\Action('fail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\JoomlaDboHelper::startTransaction()
     */
    public function startTransaction() {
        return $this->scenario->runStep(new \Codeception\Step\Action('startTransaction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\JoomlaDboHelper::rollbackTransaction()
     */
    public function rollbackTransaction() {
        return $this->scenario->runStep(new \Codeception\Step\Action('rollbackTransaction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * For the database cleanup because failed tests can left some registers
     * because the transaction is not rolledback.
     *
     * @return [type] [description]
     * @see \Codeception\Module\JoomlaDboHelper::cleanupDatabase()
     */
    public function cleanupDatabase() {
        return $this->scenario->runStep(new \Codeception\Step\Action('cleanupDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\JoomlaDboHelper::addExtensionToDatabase()
     */
    public function addExtensionToDatabase($name, $type, $element, $folder = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('addExtensionToDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\JoomlaDboHelper::addExtensionUpdateSiteToDatabase()
     */
    public function addExtensionUpdateSiteToDatabase($siteId, $name, $extensionId, $updateURL) {
        return $this->scenario->runStep(new \Codeception\Step\Action('addExtensionUpdateSiteToDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\JoomlaDboHelper::loadResultFromDatabase()
     */
    public function loadResultFromDatabase($sql) {
        return $this->scenario->runStep(new \Codeception\Step\Action('loadResultFromDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\JoomlaDboHelper::loadObjectFromDatabase()
     */
    public function loadObjectFromDatabase($sql) {
        return $this->scenario->runStep(new \Codeception\Step\Action('loadObjectFromDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\JoomlaDboHelper::loadObjectListFromDatabase()
     */
    public function loadObjectListFromDatabase($sql) {
        return $this->scenario->runStep(new \Codeception\Step\Action('loadObjectListFromDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\JoomlaDboHelper::insertIntoDatabase()
     */
    public function insertIntoDatabase($sql) {
        return $this->scenario->runStep(new \Codeception\Step\Action('insertIntoDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Allow to get a private or protected attribute from any instance
     *
     * @param  mixed  $instance  The instance
     * @param  string $attribute The attribute name
     * @return mixed             The attribute value
     * @see \Codeception\Module\ClassHelper::getAttributeFromInstance()
     */
    public function getAttributeFromInstance($instance, $attribute) {
        return $this->scenario->runStep(new \Codeception\Step\Action('getAttributeFromInstance', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ClassHelper::callMethodFromInstance()
     */
    public function callMethodFromInstance($instance, $method, $args = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('callMethodFromInstance', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::constructDumbGenericComponent()
     */
    public function constructDumbGenericComponent($params = null, $override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('constructDumbGenericComponent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::makeDumbGenericComponent()
     */
    public function makeDumbGenericComponent($override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('makeDumbGenericComponent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::makeDumbGenericModule()
     */
    public function makeDumbGenericModule($override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('makeDumbGenericModule', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::makeDumbGenericLibrary()
     */
    public function makeDumbGenericLibrary($override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('makeDumbGenericLibrary', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::constructDumbGenericModule()
     */
    public function constructDumbGenericModule($params = null, $override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('constructDumbGenericModule', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::constructDumbGenericPlugin()
     */
    public function constructDumbGenericPlugin($params = null, $override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('constructDumbGenericPlugin', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::constructDumbGenericLibrary()
     */
    public function constructDumbGenericLibrary($params = null, $override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('constructDumbGenericLibrary', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::constructDumbGenericTemplate()
     */
    public function constructDumbGenericTemplate($params = null, $override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('constructDumbGenericTemplate', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::constructDumbGenericCLI()
     */
    public function constructDumbGenericCLI($params = null, $override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('constructDumbGenericCLI', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsGenericHelper::getExtensionMockPath()
     */
    public function getExtensionMockPath($element) {
        return $this->scenario->runStep(new \Codeception\Step\Action('getExtensionMockPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsLicensedHelper::constructDumbLicensedComponent()
     */
    public function constructDumbLicensedComponent($params = null, $override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('constructDumbLicensedComponent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsLicensedHelper::makeDumbLicensedComponent()
     */
    public function makeDumbLicensedComponent($override = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('makeDumbLicensedComponent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsLicensedHelper::copyMockComponentToJoomla()
     */
    public function copyMockComponentToJoomla($element) {
        return $this->scenario->runStep(new \Codeception\Step\Action('copyMockComponentToJoomla', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ExtensionsLicensedHelper::removeMockComponentFromJoomla()
     */
    public function removeMockComponentFromJoomla($element) {
        return $this->scenario->runStep(new \Codeception\Step\Action('removeMockComponentFromJoomla', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AssertHelper::assertClassName()
     */
    public function assertClassName($expected, $current) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertClassName', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AssertHelper::assertEqualsSerializing()
     */
    public function assertEqualsSerializing($expected, $current) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertEqualsSerializing', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AssertHelper::assertNotEqualsSerializing()
     */
    public function assertNotEqualsSerializing($expected, $current) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNotEqualsSerializing', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AssertHelper::assertIsObject()
     */
    public function assertIsObject($object) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertIsObject', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AssertHelper::assertIsArray()
     */
    public function assertIsArray($variable) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertIsArray', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AssertHelper::assertIsString()
     */
    public function assertIsString($variable) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertIsString', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AssertHelper::assertIsEmptyArray()
     */
    public function assertIsEmptyArray($variable) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertIsEmptyArray', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AssertHelper::assertIsNotEmptyArray()
     */
    public function assertIsNotEmptyArray($variable) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertIsNotEmptyArray', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AssertHelper::assertArrayCount()
     */
    public function assertArrayCount($count, $variable) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertArrayCount', func_get_args()));
    }
}
